
I2Cproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800049c  0800049c  0000149c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004ac  080004ac  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004ac  080004ac  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004ac  080004ac  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ac  080004ac  000014ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b0  080004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004b4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013a1  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000501  00000000  00000000  000033d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  000038d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000146  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea0e  00000000  00000000  00003bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f70  00000000  00000000  000225fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd515  00000000  00000000  0002456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e1a81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  000e1ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000e2038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000484 	.word	0x08000484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000484 	.word	0x08000484

080001c8 <main>:
#define I2C_SPEED           100000  // 100 kHz

void I2C_Master_Init(void);
void I2C_Master_Write(uint8_t slave_addr, uint8_t *data, uint8_t length);

int main(void) {
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
    uint8_t message[] = "Hello, ESP32!";
 80001ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000204 <main+0x3c>)
 80001d0:	f107 0408 	add.w	r4, r7, #8
 80001d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001d6:	c407      	stmia	r4!, {r0, r1, r2}
 80001d8:	8023      	strh	r3, [r4, #0]

    // Initialize I2C
    I2C_Master_Init();
 80001da:	f000 f817 	bl	800020c <I2C_Master_Init>

    while (1) {
        // Send data to the slave
        I2C_Master_Write(I2C_SLAVE_ADDRESS, message, sizeof(message) - 1);
 80001de:	f107 0308 	add.w	r3, r7, #8
 80001e2:	220d      	movs	r2, #13
 80001e4:	4619      	mov	r1, r3
 80001e6:	2028      	movs	r0, #40	@ 0x28
 80001e8:	f000 f85a 	bl	80002a0 <I2C_Master_Write>

        // Delay for demonstration purposes
        for (volatile int i = 0; i < 500000; i++);
 80001ec:	2300      	movs	r3, #0
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	e002      	b.n	80001f8 <main+0x30>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a03      	ldr	r2, [pc, #12]	@ (8000208 <main+0x40>)
 80001fc:	4293      	cmp	r3, r2
 80001fe:	ddf8      	ble.n	80001f2 <main+0x2a>
        I2C_Master_Write(I2C_SLAVE_ADDRESS, message, sizeof(message) - 1);
 8000200:	e7ed      	b.n	80001de <main+0x16>
 8000202:	bf00      	nop
 8000204:	0800049c 	.word	0x0800049c
 8000208:	0007a11f 	.word	0x0007a11f

0800020c <I2C_Master_Init>:
    }
}

void I2C_Master_Init(void) {
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000210:	4b20      	ldr	r3, [pc, #128]	@ (8000294 <I2C_Master_Init+0x88>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a1f      	ldr	r2, [pc, #124]	@ (8000294 <I2C_Master_Init+0x88>)
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB8 and PB9 as alternate function (AF4 for I2C1)
    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 800021c:	4b1e      	ldr	r3, [pc, #120]	@ (8000298 <I2C_Master_Init+0x8c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1d      	ldr	r2, [pc, #116]	@ (8000298 <I2C_Master_Init+0x8c>)
 8000222:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000226:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1; // Alternate function
 8000228:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <I2C_Master_Init+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1a      	ldr	r2, [pc, #104]	@ (8000298 <I2C_Master_Init+0x8c>)
 800022e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000232:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= GPIO_OTYPER_OT_8 | GPIO_OTYPER_OT_9; // Open-drain
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <I2C_Master_Init+0x8c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a17      	ldr	r2, [pc, #92]	@ (8000298 <I2C_Master_Init+0x8c>)
 800023a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800023e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9; // High speed
 8000240:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <I2C_Master_Init+0x8c>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a14      	ldr	r2, [pc, #80]	@ (8000298 <I2C_Master_Init+0x8c>)
 8000246:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800024a:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR9_0; // Pull-up
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <I2C_Master_Init+0x8c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a11      	ldr	r2, [pc, #68]	@ (8000298 <I2C_Master_Init+0x8c>)
 8000252:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000256:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL8_Pos) | (4 << GPIO_AFRH_AFSEL9_Pos); // AF4
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <I2C_Master_Init+0x8c>)
 800025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800025c:	4a0e      	ldr	r2, [pc, #56]	@ (8000298 <I2C_Master_Init+0x8c>)
 800025e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000262:	6253      	str	r3, [r2, #36]	@ 0x24

    // Enable I2C1 clock
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000264:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <I2C_Master_Init+0x88>)
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <I2C_Master_Init+0x88>)
 800026a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800026e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure I2C1
    I2C1->CR2 = 16; // APB1 clock frequency (16 MHz)
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <I2C_Master_Init+0x90>)
 8000272:	2210      	movs	r2, #16
 8000274:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80; // Clock control (100 kHz)
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <I2C_Master_Init+0x90>)
 8000278:	2250      	movs	r2, #80	@ 0x50
 800027a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17; // Maximum rise time
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <I2C_Master_Init+0x90>)
 800027e:	2211      	movs	r2, #17
 8000280:	621a      	str	r2, [r3, #32]
    I2C1->CR1 = I2C_CR1_PE; // Enable I2C
 8000282:	4b06      	ldr	r3, [pc, #24]	@ (800029c <I2C_Master_Init+0x90>)
 8000284:	2201      	movs	r2, #1
 8000286:	601a      	str	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40005400 	.word	0x40005400

080002a0 <I2C_Master_Write>:

void I2C_Master_Write(uint8_t slave_addr, uint8_t *data, uint8_t length) {
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	71fb      	strb	r3, [r7, #7]
 80002ac:	4613      	mov	r3, r2
 80002ae:	71bb      	strb	r3, [r7, #6]
    // Wait until I2C is not busy
    while (I2C1->SR2 & I2C_SR2_BUSY);
 80002b0:	bf00      	nop
 80002b2:	4b21      	ldr	r3, [pc, #132]	@ (8000338 <I2C_Master_Write+0x98>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0302 	and.w	r3, r3, #2
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f9      	bne.n	80002b2 <I2C_Master_Write+0x12>

    // Generate start condition
    I2C1->CR1 |= I2C_CR1_START;
 80002be:	4b1e      	ldr	r3, [pc, #120]	@ (8000338 <I2C_Master_Write+0x98>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000338 <I2C_Master_Write+0x98>)
 80002c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c8:	6013      	str	r3, [r2, #0]

    // Wait for start bit to be set
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80002ca:	bf00      	nop
 80002cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <I2C_Master_Write+0x98>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f9      	beq.n	80002cc <I2C_Master_Write+0x2c>

    // Send slave address with write bit
    I2C1->DR = (slave_addr << 1);
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a17      	ldr	r2, [pc, #92]	@ (8000338 <I2C_Master_Write+0x98>)
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	6113      	str	r3, [r2, #16]

    // Wait for address to be sent
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002e0:	bf00      	nop
 80002e2:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <I2C_Master_Write+0x98>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 0302 	and.w	r3, r3, #2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <I2C_Master_Write+0x42>
    (void)I2C1->SR2; // Clear ADDR flag by reading SR2
 80002ee:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <I2C_Master_Write+0x98>)
 80002f0:	699b      	ldr	r3, [r3, #24]

    // Send data
    for (uint8_t i = 0; i < length; i++) {
 80002f2:	2300      	movs	r3, #0
 80002f4:	73fb      	strb	r3, [r7, #15]
 80002f6:	e00f      	b.n	8000318 <I2C_Master_Write+0x78>
        I2C1->DR = data[i];
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	4413      	add	r3, r2
 80002fe:	781a      	ldrb	r2, [r3, #0]
 8000300:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <I2C_Master_Write+0x98>)
 8000302:	611a      	str	r2, [r3, #16]
        while (!(I2C1->SR1 & I2C_SR1_TXE)); // Wait for transmission
 8000304:	bf00      	nop
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <I2C_Master_Write+0x98>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <I2C_Master_Write+0x66>
    for (uint8_t i = 0; i < length; i++) {
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	3301      	adds	r3, #1
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	7bfa      	ldrb	r2, [r7, #15]
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	429a      	cmp	r2, r3
 800031e:	d3eb      	bcc.n	80002f8 <I2C_Master_Write+0x58>
    }

    // Generate stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <I2C_Master_Write+0x98>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <I2C_Master_Write+0x98>)
 8000326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800032a:	6013      	str	r3, [r2, #0]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40005400 	.word	0x40005400

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <NMI_Handler+0x4>

08000344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <MemManage_Handler+0x4>

08000354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <BusFault_Handler+0x4>

0800035c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <UsageFault_Handler+0x4>

08000364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000392:	f000 f83f 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <SystemInit+0x20>)
 80003a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a6:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <SystemInit+0x20>)
 80003a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003c4:	f7ff ffea 	bl	800039c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	@ (80003fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	@ (8000400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	@ (800040c <LoopFillZerobss+0x22>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 f825 	bl	800043c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f7ff fee9 	bl	80001c8 <main>
  bx  lr    
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000404:	080004b4 	.word	0x080004b4
  ldr r2, =_sbss
 8000408:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800040c:	20000024 	.word	0x20000024

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <HAL_IncTick+0x20>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_IncTick+0x24>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <HAL_IncTick+0x24>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000000 	.word	0x20000000
 8000438:	20000020 	.word	0x20000020

0800043c <__libc_init_array>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	4d0d      	ldr	r5, [pc, #52]	@ (8000474 <__libc_init_array+0x38>)
 8000440:	4c0d      	ldr	r4, [pc, #52]	@ (8000478 <__libc_init_array+0x3c>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	2600      	movs	r6, #0
 8000448:	42a6      	cmp	r6, r4
 800044a:	d109      	bne.n	8000460 <__libc_init_array+0x24>
 800044c:	4d0b      	ldr	r5, [pc, #44]	@ (800047c <__libc_init_array+0x40>)
 800044e:	4c0c      	ldr	r4, [pc, #48]	@ (8000480 <__libc_init_array+0x44>)
 8000450:	f000 f818 	bl	8000484 <_init>
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	10a4      	asrs	r4, r4, #2
 8000458:	2600      	movs	r6, #0
 800045a:	42a6      	cmp	r6, r4
 800045c:	d105      	bne.n	800046a <__libc_init_array+0x2e>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	f855 3b04 	ldr.w	r3, [r5], #4
 8000464:	4798      	blx	r3
 8000466:	3601      	adds	r6, #1
 8000468:	e7ee      	b.n	8000448 <__libc_init_array+0xc>
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	3601      	adds	r6, #1
 8000472:	e7f2      	b.n	800045a <__libc_init_array+0x1e>
 8000474:	080004ac 	.word	0x080004ac
 8000478:	080004ac 	.word	0x080004ac
 800047c:	080004ac 	.word	0x080004ac
 8000480:	080004b0 	.word	0x080004b0

08000484 <_init>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr

08000490 <_fini>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr
